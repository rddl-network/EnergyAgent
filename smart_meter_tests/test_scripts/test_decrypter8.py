from Crypto.Cipher import AES  # Library: PyCryptodome 
message = "7ea08bceff0313eee1e6e700e0400001000077db084c475a67737c7e8e820103300009833108abce90b04deb2c46f68ae7d8e04f42404131bb25d50be0de4b6c81c6bcb7f094c2f9cf41f85dae692eefd67d74a1c12045fc673e72143da1ea280d7b38751e33a38af80d5b641c2b9025dfa64d2ad115064af080086a141563f5056caf7b3a99595f904ef3527e"
           #7ea08bceff0313eee1e6e700e0400001000077db084c475a67737c7e8e820103300009833108abce90b04deb2c46f68ae7d8e04f42404131bb25d50be0de4b6c81c6bcb7f094c2f9cf41f85dae692eefd67d74a1c12045fc673e72143da1ea280d7b38751e33a38af80d5b641c2b9025dfa64d2ad115064af080086a141563f5056caf7b3a99595f904ef3527e
#'DB084B414D4501A4DC528201D030000788E1A039B2D14C712DD4D8C8440D5368E433BD70B73681E9A9EFFE38F175A37DE9CDE64E8F780D8F18B43FC059D87902F3D747B814BCD06A4700687801BD5D06612054507D44E76698CC3E35CC9DE62C284C0DEEA635B9BFC56CE1FE5A3A1E5E270B0C181ACF02151FCC592134D04F0292B5A35338D7B781BB1F2A7E4071815CEED5D4BAC6EFAAAFF979EF969D0DB46F51E5E0FC00F5AD105FBEF95FC5F885460B5632554AC05D9EB4F65FF223972A47CFD434B5F5E2D853EA4C14727586F0E21C6EE125268CB4DC7EC5B10F8483C010C8E688DF86584D7C29D81731A4E0969141B6ADD942E40A96E3E2DC2F9020BF9D5802A18DC985BB5422F470C0629D22DB6F16B6647DB3C9F727C170C2DB4C9A230F828346E86F56D347B62BFE28A507AE2A219ACC63AD5EE06ECB949DC4FDC2D2F808027A4A4C677C93C4C8909D7336D8B8B3791836C5555E74E25482A44A5F6D358DCE8450478F8B2C5D5666C2CF8BD190D4874E707F5D4BCDE94E91355A8139C3E41CD5F08899B65EE9B59FC60372E4F92BC99826B8C147F2095FB38A891409AA81E227076C21CB7CAF73B3E8A4E256C70D9547A914F39C169376BF922B08064EC4FB31D44ECD721D1A151E4E684F0B2685C4B69D96F5FB52D0B81279'
                                                 db084c475a677362f13a8201c53000b1c93ac314534522ab2950a9ea270671286f925dcec213a10c6329996a2e15a9186ce206a21c0a8d63b8d754342da0466ffca7215ae0110d90e11118ab660b17832324a4d01836e9defc389f12a0a184593e64eed2e4e925f1dda658b5a1c2efa021fa8e776aff95f5007e7ea08bceff0313ee
            

encryption_key = bytes.fromhex('5AD84121D9D20B364B7A11F3C1B5827F')
authentication_key = bytes.fromhex('AFB3F93E3E7204EDB3C27F96DBD51AE0')
header = '7E A1 E9 41 03 13 C6 37 E6 E7 00' 
cipher_text

cipher_text = bytes.fromhex(cipher_text.replace(' ','')) 
cipher_text = 'db084c475a67737c7e8e820103300009833108abce90b04deb2c46f68ae7d8e04f42404131bb25d50be0de4b6c81c6bcb7f094c2f9cf41f85dae692eefd67d74a1c12045fc673e72143da1ea280d7b38751e33a38af80d5b641c2b9025dfa64d2ad115064af080086a141563f5056caf7b3a99595f904ef3527e'
cipher_text = bytes.fromhex(cipher_text)
footer = '36 24 7E' 

system_title = cipher_text[2:2+8] 

initialization_vector = system_title + cipher_text[14:14+4] 

additional_authenticated_data =  cipher_text[13:13+1]  + authentication_key 

authentication_tag = cipher_text[len(cipher_text)-12:len(cipher_text)] 

cipher = AES.new(encryption_key, AES.MODE_GCM, nonce=initialization_vector, mac_len=len(authentication_tag))

cipher.update(additional_authenticated_data) 
#Cipher._mode_gcm.GcmMode object at 0x7fcfa1f69a60>

plaintext = cipher.decrypt_and_verify(cipher_text[18:len(cipher_text)-12],authentication_tag)

print(plaintext.hex()) 
#0f000000000c07e40107020e2f14ff80000002410a0e4b616d73747275705f563030303109060101010800ff06000d394c09060101020800ff060000000009060101030800ff060000452c09060101040800ff060000000009060101000001ff0601a4dc5209060101010700ff060000000009060101020700ff060000000009060101030700ff060000000009060101040700ff060000000009060001010000ff090c07e40107020e2f14ff80000009060101200700ff1200e009060101340700ff1200df09060101480700ff1200df090601011f0700ff060000000009060101330700ff060000000009060101470700ff060000000009060101150700ff060000000009060101290700ff0600000000090601013d0700ff060000000009060101210700ff12006409060101350700ff12006409060101490700ff120064090601010d0700ff12006409060101160700ff0600000000090601012a0700ff0600000000090601013e0700ff060000000009060101160800ff0600000000090601012a0800ff0600000000090601013e0800ff060000000009060101150800ff06000468a409060101290800ff060004678c090601013d0800ff060004691b